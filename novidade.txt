Para abrir o terminal basta utilizar o atalho CTRL + J ;

Para verificar a versão de qualquer coisa que foi instalada, pode-se abrir o 
terminal e digitar o 'nomeDaCoisa' --version ou 'nomdeDaCoisa' -v
Por exemplo: node --version ;

Para dizer que este é um projeto Node, precisa-se criar uma pequena estrutura para
os interpretadores identifiquem como um projeto Node;

Quando instala-se o Node, instala-se juntamente o npm, que é um gerenciador que auxília
o Node, como por exemplo, os comandos no terminal. 
Ou seja, este comando:      npm init es6 -y
Está dizendo para o npm iniciar o ECMAScript6 e o -y , refere-se a remoção de 
algumas confirmações que seria necessário aceitar para a continuação;

Executando o código já é criado automaticamente um arquivo novo. Quando se é utilizado
o npm init, já cria-se uma estrutura de projeto node. 
O que faz parte dessa estrutura?
O arquivo package.json.
O que este arquivo faz?
Duas coisa, descreve o projeto e versão em que ele está, e também descreve as 
DEPÊNDENCIAS e TECNOLOGIAS que o projeto usa.
Ou seja, tudo que for externo que será usado no projeto, tem que aparecer neste arquivo;

No dia a dia de códigos, é muito comum a utilização de trechos de códigos prontos, para
realizar tarefas repetitivas, como validações, requisições, já que esses trechos já foram
debugados e testados pela comunidade. Um dos mais comuns é o Express;

O Express entra neste projeto, para não haver a necessidade de criar um código gigantesco
de um servidor, reaproveitando assim um código pronto. Então existe um módulo do Node que
ajuda a criar um servidor e servir o projeto;

Códigos http : É uma série de códigos numéricos com um texto associado que indica tudo o que pode acontecer em uma conexão
entre cliente e servidor. O status 200 é o código que significa OK, ou seja a requisição foi enviada e recebida e recebeu uma mensagem com sucesso;

Quando os dados estão na aplicação e não estão no banco de dados chama-se de 'Mock'. para facilitar o fluxo de desenvolvimento para texte, 'finge-se' que os dados mockados vêm de um lugar que ele não vem, já que são locais;

Quando manda-se e recebe-se dados nas comunicações http, os dados conseguem apenas trafegar como texto. Só que tem um problema, um texto pode ser um monte de caracteres, então se o array ou lista de objetos for um textão, não consiguimos acessar cada um desses objetos e pegar as informações dentro deles. O JavaScript tem que reconhecer como um OBJETO, que é diferente de uma sequência de caracteres;
Para conseguir-mos fazer isso, precisa adicionar uma rota no express, para que o express consiga 'parssear' ou converter o texto em json;

Toda vez que cria-se um registro em um banco de dados, ou em uma base de dados, esse registro precisa de uma forma de ser indentificado, precisando de um identificador;